import jakarta.servlet.http.HttpServletRequest
import jakarta.servlet.http.HttpServletResponse
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.Test
import org.springframework.http.MediaType
import org.springframework.security.core.AuthenticationException
import java.io.PrintWriter
import java.io.StringWriter

class SecurityHandlersTest {

    @Test
    fun `BlmAuthEntryPoint should respond 401 with correct message`() {
        val request: HttpServletRequest = mockk()
        val response: HttpServletResponse = mockk(relaxed = true)
        val writerString = StringWriter()
        val printWriter = PrintWriter(writerString)
        every { response.writer } returns printWriter
        val authException: AuthenticationException = mockk()
        val entryPoint = BlmAuthEntryPoint()

        entryPoint.commence(request, response, authException)

        verify { response.status = HttpServletResponse.SC_UNAUTHORIZED }
        verify { response.contentType = MediaType.TEXT_PLAIN_VALUE }
        printWriter.flush()
        assert(writerString.toString().contains("ERROR 401 UNAUTHORIZED"))
        assert(writerString.toString().contains("Authentication failed"))
    }

    @Test
    fun `BLmAccessDeniedHandler should respond 403 with correct message`() {
        val request: HttpServletRequest = mockk()
        val response: HttpServletResponse = mockk(relaxed = true)
        val writerString = StringWriter()
        val printWriter = PrintWriter(writerString)
        every { response.writer } returns printWriter
        val accessDeniedHandler = BLmAccessDeniedHandler()
        val accessDeniedException = org.springframework.security.access.AccessDeniedException("Access denied")

        accessDeniedHandler.handle(request, response, accessDeniedException)

        verify { response.status = HttpServletResponse.SC_FORBIDDEN }
        verify { response.contentType = MediaType.TEXT_PLAIN_VALUE }
        printWriter.flush()
        assert(writerString.toString().contains("ERROR 403 FORBIDDEN"))
        assert(writerString.toString().contains("Access denied"))
    }
}