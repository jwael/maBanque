import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource

class ClsKafkaListenerTest {

    private val handLeClsContactFeedbackUseCaseApi = mockk<HandLeClsContactFeedbackUseCaseApi>(relaxed = true)
    private val listener = ClsKafkaListener(handLeClsContactFeedbackUseCaseApi)

    @ParameterizedTest
    @CsvSource(
        "FR, ABC123, SUCCESS, ''",
        "DE, XYZ789, ERROR, Some error message"
    )
    fun `should invoke use case with correct payload`(
        country: String,
        reconciliationIdValue: String,
        status: String,
        errorMessage: String
    ) {
        // GIVEN
        val kafkaMessage = ClsFeedbackContactKafkaMessage(
            scope = null,
            status = status,
            errorMessage = if (errorMessage.isEmpty()) null else errorMessage
        )

        // WHEN
        listener.acceptClsContactFeedback(
            countryHeader = country,
            reconciliationIdHeader = reconciliationIdValue,
            clsFeedbackContactKafkaMessage = kafkaMessage
        )

        // THEN
        verify {
            handLeClsContactFeedbackUseCaseApi.invoke(
                clsContactDataRequestPayload = withArg { payload ->
                    assert(payload.countryCode.value == country)
                    assert(payload.reconciliationId.value == reconciliationIdValue)
                    assert(payload.contactRole