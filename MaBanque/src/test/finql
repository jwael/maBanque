package com.arval.blm.core.adapter.crm

import com.arval.blm.core.domain.model.*
import com.arval.blm.core.infrastructure.client.crm.CrmClient
import io.mockk.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import retrofit2.Call
import retrofit2.Response
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

class CrmCustomerProviderAdapterTest {

    private val crmClient: CrmClient = mockk()
    private lateinit var adapter: CrmCustomerProviderAdapter

    // ===== Données communes =====
    private val crmClsCustomerData = CrmClsCustomerData(
        batchId = "BATCH_001",
        reconciliationId = ReconciliationId(
            ReferenceId("REF_BATCH_1"), 
            ReferenceId("0123456789") // 10 caractères
        ),
        rowNumber = 1,
        rowReference = ReferenceId("0123456789"), // 10 caractères
        crmData = CrmData(
            title = "Dr.",
            salutation = "Dr.",
            prefLanguageComm = "French",
            gender = "Male",
            contactRole = "Driver",
            country = "GB",
            mainCountry = "GB"
        ),
        clsData = emptyMap(),
        crmInsertedId = null
    )

    private lateinit var crmRequest: CrmCustomerRequest
    private lateinit var crmResponseBody: CrmCustomerResponse
    private lateinit var crmCall: Call<CrmCustomerResponse>

    @BeforeEach
    fun setup() {
        adapter = CrmCustomerProviderAdapter(crmClient)

        crmRequest = mockk(relaxed = true)
        crmResponseBody = mockk(relaxed = true)
        crmCall = mockk()
        every { crmCall.execute() } returns Response.success(crmResponseBody)

        // Mock des extensions
        mockkStatic("com.arval.blm.core.domain.model.CrmClsCustomerDataKt")
        every { crmClsCustomerData.toCrmCustomerRequest(isCrmUpdate = false) } returns crmRequest
        every { crmClsCustomerData.toCrmCustomerRequest(isCrmUpdate = true) } returns crmRequest

        // Client CRM
        every { crmClient.createCustomer(any(), any()) } returns crmCall
        every { crmClient.updateCustomer(any(), any(), any()) } returns crmCall
        every { crmClient.createRole(any(), any(), any()) } returns crmCall
        every { crmClient.updateRole(any(), any(), any(), any()) } returns crmCall

        // Mapping responses
        every { crmResponseBody.toDomain() } returns CrmCustomerResponsePayload(
            crmStatus = RecordStepStatus.OK,
            crmMessage = "Success",
            crmAccountId = "SF_123",
            crmRoleId = null
        )
    }

    @Test
    fun `should return successful CrmCustomerResponsePayload when CRM creation is successful`() {
        val result = adapter.createCrmCustomer(crmClsCustomerData)
        assertNotNull(result)
        assertEquals(RecordStepStatus.OK, result.crmStatus)
        assertEquals("Success", result.crmMessage)
        assertEquals("SF_123", result.crmAccountId)
        verify { crmClient.createCustomer(any(), any()) }
        verify { crmCall.execute() }
    }

    @Test
    fun `should return successful CrmCustomerResponsePayload when CRM update is successful`() {
        val result = adapter.updateCrmCustomer(crmClsCustomerData)
        assertNotNull(result)
        assertEquals(RecordStepStatus.OK, result.crmStatus)
        assertEquals("Success", result.crmMessage)
        assertEquals("SF_123", result.crmAccountId)
        verify { crmClient.updateCustomer(any(), any(), any()) }
        verify { crmCall.execute() }
    }

    @Test
    fun `should create CRM role successfully`() {
        val crmRoleData = CrmRoleData(
            reconciliationId = crmClsCustomerData.reconciliationId,
            batchId = crmClsCustomerData.batchId,
            rowNumber = crmClsCustomerData.rowNumber,
            crmCustomerData = crmClsCustomerData.crmData
        )

        val result = adapter.createCrmRole(crmRoleData)
        assertNotNull(result)
        assertEquals(RecordStepStatus.OK, result.crmStatus)
        verify { crmClient.createRole(any(), any(), any()) }
        verify { crmCall.execute() }
    }

    @Test
    fun `should update CRM role successfully`() {
        val crmRoleData = CrmRoleData(
            reconciliationId = crmClsCustomerData.reconciliationId,
            batchId = crmClsCustomerData.batchId,
            rowNumber = crmClsCustomerData.rowNumber,
            crmCustomerData = crmClsCustomerData.crmData
        )

        val result = adapter.updateCrmRole(crmRoleData)
        assertNotNull(result)
        assertEquals(RecordStepStatus.OK, result.crmStatus)
        verify { crmClient.updateRole(any(), any(), any(), any()) }
        verify { crmCall.execute() }
    }
}