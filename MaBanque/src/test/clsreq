package com.arval.bim.infrastructure.driven.kafka.message

import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class ClsRequestCustomerKafkaMessageTest {

    private val objectMapper = jacksonObjectMapper()

    @Test
    fun `should create ClsRequestCustomerKafkaMessage successfully`() {
        // Given
        val salesforceId = "SF123"
        val type = "B2B"
        val accType = "Corporate"
        val clsAccountId = "CLS-456"

        // When
        val message = ClsRequestCustomerKafkaMessage(
            persAcctSalesforceID = salesforceId,
            persAcctType = type,
            persAccType = accType,
            persAcctCLSAccountID = clsAccountId
        )

        // Then
        assertThat(message.persAcctSalesforceID).isEqualTo(salesforceId)
        assertThat(message.persAcctType).isEqualTo(type)
        assertThat(message.persAccType).isEqualTo(accType)
        assertThat(message.persAcctCLSAccountID).isEqualTo(clsAccountId)
    }

    @Test
    fun `should be equal when all properties match`() {
        // Given
        val message1 = ClsRequestCustomerKafkaMessage("SF123", "B2B", "Corporate", "CLS-456")
        val message2 = ClsRequestCustomerKafkaMessage("SF123", "B2B", "Corporate", "CLS-456")

        // Then
        assertThat(message1).isEqualTo(message2)
        assertThat(message1.hashCode()).isEqualTo(message2.hashCode())
    }

    @Test
    fun `should correctly serialize and deserialize JSON`() {
        // Given
        val original = ClsRequestCustomerKafkaMessage("SF123", "B2B", "Corporate", "CLS-456")

        // When
        val json = objectMapper.writeValueAsString(original)
        val deserialized = objectMapper.readValue(json, ClsRequestCustomerKafkaMessage::class.java)

        // Then
        assertThat(deserialized).isEqualTo(original)
    }

    @Test
    fun `should copy and modify one field`() {
        // Given
        val original = ClsRequestCustomerKafkaMessage("SF123", "B2B", "Corporate", "CLS-456")

        // When
        val updated = original.copy(persAcctType = "B2C")

        // Then
        assertThat(updated.persAcctSalesforceID).isEqualTo("SF123")
        assertThat(updated.persAcctType).isEqualTo("B2C")
        assertThat(updated.persAccType).isEqualTo("Corporate")
        assertThat(updated.persAcctCLSAccountID).isEqualTo("CLS-456")
    }
}