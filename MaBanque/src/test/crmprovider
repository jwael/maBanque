package com.arval.blm.core.adapter.crm

import com.arval.blm.core.domain.model.*
import com.arval.blm.core.infrastructure.client.crm.CrmClient
import io.mockk.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import java.time.Instant
import kotlin.test.assertEquals
import kotlin.test.assertNotNull
import retrofit2.Response

class CrmCustomerProviderAdapterTest {

@Test
fun `should return successful CrmCustomerResponsePayload when CRM update is successful`() {
    // GIVEN
    val crmClsCustomerData = CrmClsCustomerData(
        batchId = "BATCH_001",
        reconciliationId = ReconciliationId(ReferenceId("REF_BATCH"), ReferenceId("REF_ROW")),
        rowNumber = 1,
        rowReference = ReferenceId("REF_ROW"),
        crmData = CrmData(
            title = "Dr.",
            salutation = "Dr.",
            prefLanguageComm = "French",
            gender = "Male",
            contactRole = "Driver",
            country = "GB",
            mainCountry = "GB",
            salesforceAccountId = "SF_123" // Nécessaire pour update
        ),
        clsData = emptyMap(),
        crmInsertedId = null
    )

    val crmRequest = mockk<CrmCustomerRequest>(relaxed = true)
    val crmResponseBody = mockk<CrmCustomerResponse>(relaxed = true)

    val crmResponse = mockk<Response<CrmCustomerResponse>> {
        every { isSuccessful } returns true
        every { body() } returns crmResponseBody
    }

    mockkStatic("com.arval.blm.core.domain.model.CrmClsCustomerDataKt")
    every { crmClsCustomerData.toCrmCustomerRequest(isCrmUpdate = true) } returns crmRequest
    every { crmClient.updateCustomer(any(), any(), any()) } returns crmResponse
    every { crmResponseBody.toDomain() } returns CrmCustomerResponsePayload(
        crmStatus = RecordStepStatus.OK,
        crmMessage = "Customer updated successfully",
        crmAccountId = "SF_123",
        crmRoleId = null
    )

    // WHEN
    val result = adapter.updateCrmCustomer(crmClsCustomerData)

    // THEN
    assertNotNull(result)
    assertEquals(RecordStepStatus.OK, result.crmStatus)
    assertEquals("Customer updated successfully", result.crmMessage)
    assertEquals("SF_123", result.crmAccountId)
    verify { crmClient.updateCustomer(any(), any(), any()) }
}

    private val crmClient: CrmClient = mockk()
    private lateinit var adapter: CrmCustomerProviderAdapter

    @BeforeEach
    fun setup() {
        adapter = CrmCustomerProviderAdapter(crmClient)
    }

    @Test
    fun `should return successful CrmCustomerResponsePayload when CRM creation is successful`() {
        // GIVEN
        val crmClsCustomerData = CrmClsCustomerData(
            batchId = "BATCH_001",
            reconciliationId = ReconciliationId(ReferenceId("REF_BATCH"), ReferenceId("REF_ROW")),
            rowNumber = 1,
            rowReference = ReferenceId("REF_ROW"),
            crmData = CrmData(
                title = "Dr.",
                salutation = "Dr.",
                prefLanguageComm = "French",
                gender = "Male",
                contactRole = "Driver",
                country = "GB",
                mainCountry = "GB"
            ),
            clsData = emptyMap(),
            crmInsertedId = null
        )

        val crmRequest = mockk<CrmCustomerRequest>(relaxed = true)
        val crmResponseBody = mockk<CrmCustomerResponse>(relaxed = true)
        val crmResponsePayload = crmResponseBody.toDomain() // Simulé via extension normalement

        val crmResponse = mockk<Response<CrmCustomerResponse>> {
            every { isSuccessful } returns true
            every { body() } returns crmResponseBody
        }

        // Mock des extensions et appels nécessaires
        mockkStatic("com.arval.blm.core.domain.model.CrmClsCustomerDataKt")
        every { crmClsCustomerData.toCrmCustomerRequest(isCrmUpdate = false) } returns crmRequest
        every { crmClient.createCustomer(any(), any()) } returns crmResponse
        every { crmResponseBody.toDomain() } returns CrmCustomerResponsePayload(
            crmStatus = RecordStepStatus.OK,
            crmMessage = "Customer created successfully",
            crmAccountId = "SF_123",
            crmRoleId = null
        )

        // WHEN
        val result = adapter.createCrmCustomer(crmClsCustomerData)

        // THEN
        assertNotNull(result)
        assertEquals(RecordStepStatus.OK, result.crmStatus)
        assertEquals("Customer created successfully", result.crmMessage)
        assertEquals("SF_123", result.crmAccountId)
        verify { crmClient.createCustomer(any(), any()) }
    }
}