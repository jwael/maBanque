package com.arval.blm.infrastructure.driven.apigee.batch

import com.arval.blm.core.domain.model.contact.*
import com.arval.blm.infrastructure.driven.apigee.crm.config.BlmImportAuthorizationProperties
import io.mockk.every
import io.mockk.mockk
import org.junit.jupiter.api.Test
import org.springframework.core.io.InputStreamResource
import org.springframework.http.ResponseEntity
import java.util.stream.Stream
import kotlin.test.assertEquals
import kotlin.test.assertTrue

class BatchControllerTest {

    private val exportBatchFailedCustomersUseCaseApi = mockk<ExportBatchFailedCustomersUseCaseApi>()
    private val getFailedEventMessageUseCaseApi = mockk<GetFailedEventMessageUseCaseApi>()
    private val blmAccessAuthorization = mockk<BlmImportAuthorizationProperties>(relaxed = true)

    private val batchController = BatchController(
        listBatchesUseCaseApi = mockk(relaxed = true),
        batchImportOverviewUseCase = mockk(relaxed = true),
        getBatchSummaryUseCaseApi = mockk(relaxed = true),
        getBatchEventsUseCaseApi = mockk(relaxed = true),
        exportEventsUseCaseApi = mockk(relaxed = true),
        exportBatchFailedCustomersUseCaseApi = exportBatchFailedCustomersUseCaseApi,
        getFailedEventMessageUseCaseApi = getFailedEventMessageUseCaseApi,
        blmAccessAuthorization = blmAccessAuthorization
    )

    @Test
    fun `should export failed caixa customers as CSV`() {
        // GIVEN
        val batchReference = "BATCH001"

        val customer1 = CrmClsCustomerData(
            id = "1",
            batchId = batchReference,
            reconciliationId = ReconciliationId(
                batchReference = ReferenceId("ABC0001201"),
                rowReference = ReferenceId("ABC0001202")
            ),
            rowNumber = 1,
            rowReference = ReferenceId("ABC0001202"),
            combata = CrmData(forename = "John", surname = "Doe"),
            clsData = emptyMap(),
            crmInsertedId = null
        )

        val customer2 = CrmClsCustomerData(
            id = "2",
            batchId = batchReference,
            reconciliationId = ReconciliationId(
                batchReference = ReferenceId("ABC0001203"),
                rowReference = ReferenceId("ABC0001204")
            ),
            rowNumber = 2,
            rowReference = ReferenceId("ABC0001204"),
            combata = CrmData(forename = "Alice", surname = "Smith"),
            clsData = emptyMap(),
            crmInsertedId = null
        )

        every { exportBatchFailedCustomersUseCaseApi.execute(any()) } returns Stream.of(customer1, customer2)
        every { getFailedEventMessageUseCaseApi.execute(any()) } returns "Test error message"

        // WHEN
        val response: ResponseEntity<InputStreamResource> =
            batchController.downloadFailedCaixaCustomerRecords(batchReference, emptyList())

        // THEN
        assertEquals("attachment; filename=\"batch-$batchReference-failed-caixa-records.csv\"",
            response.headers["Content-Disposition"]?.first()
        )
        assertEquals("text/csv; charset=UTF-8", response.headers.contentType?.toString())

        // Vérifie que le contenu du CSV contient bien les données des clients
        val csvContent = response.body!!.inputStream.bufferedReader().readText()
        assertTrue(csvContent.contains("John"))
        assertTrue(csvContent.contains("Alice"))
        assertTrue(csvContent.contains("Test error message"))
    }
}