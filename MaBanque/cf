import io.mockk.*
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvSource
import org.junit.jupiter.api.DisplayName

@DisplayName("ClsKafkaListener.acceptClsContactFeedback tests")
class ClsKafkaListenerFeedbackTest {

    private val handleClsContactFeedbackUseCaseApi = mockk<HandleClsContactFeedbackUseCaseApi>(relaxed = true)

    private val listener = ClsKafkaListener(
        handleClsContactFeedbackUseCaseApi = handleClsContactFeedbackUseCaseApi,
        handleClsContactRequestUseCaseApi = mockk(relaxed = true)
    )

    @ParameterizedTest
    @CsvSource(
        "FR, ABC1234567-XYZ9876543, CLS001, SUCCESS, null",
        "DE, DEF9876543-UVW1234567, CLS002, ERROR, Something went wrong"
    )
    fun `should invoke feedback use case with correct payload`(
        country: String,
        reconciliationId: String,
        clsId: String,
        status: String,
        errorMessage: String?
    ) {
        // GIVEN
        val message = ClsFeedbackContactKafkaMessage(
            scope = clsId,
            status = status,
            errorMessage = errorMessage
        )

        // WHEN
        listener.acceptClsContactFeedback(
            countryHeader = country,
            reconciliationIdHeader = reconciliationId,
            clsFeedbackContactKafkaMessage = message
        )

        // THEN
        verify(exactly = 1) {
            handleClsContactFeedbackUseCaseApi.invoke(
                match { payload ->
                    payload.countryCode.value == country &&
                    payload.reconciliationId.print() == ReconciliationId.parse(reconciliationId).print() &&
                    payload.scope == clsId &&
                    payload.status == status &&
                    payload.errorMessage == errorMessage
                }
            )
        }

        confirmVerified(handleClsContactFeedbackUseCaseApi)
    }
}