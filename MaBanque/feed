class ClsKafkaListenerCustomerFeedbackTest {

    private val handleClsCustomerFeedbackUseCaseApi = mockk<HandleClsCustomerFeedbackUseCaseApi>(relaxed = true)

    private val listener = spyk(
        ClsKafkaListener(
            handleClsCustomerRequestUseCaseApi = mockk(relaxed = true),
            handleClsCustomerFeedbackUseCaseApi = handleClsCustomerFeedbackUseCaseApi,
            handleClsCustomerSendingUseCaseApi = mockk(relaxed = true),
            handleClsContactRequestUseCaseApi = mockk(relaxed = true),
            handleClsContactFeedbackUseCaseApi = mockk(relaxed = true)
        )
    )

    init {
        // Initialisation du topic si nÃ©cessaire
        listener.sendingCaixaCustomerTopicName = "sendingCaixaCustomerTopic"
    }

    @ParameterizedTest
    @CsvSource(
        "FR, ABC1234567-XYZ9876543, SUCCESS, ,",
        "DE, DEF9876543-UVW1234567, ERROR, Message erreur, SALES"
    )
    fun `should invoke customer feedback use case with correct payload`(
        country: String,
        reconciliationId: String,
        status: String,
        errorMessage: String?,
        scope: String?
    ) {
        // GIVEN
        val message = CLsFeedbackCustomerKafkaMessage(
            status = status,
            errorMessage = errorMessage,
            scope = scope
        )

        // WHEN
        listener.acceptClsCaixaCustomerFeedback(
            countryHeader = country,
            reconciliationIdHeader = reconciliationId,
            clsFeedbackCustomerKafkaMessage = message
        )

        // THEN
        verify(exactly = 1) {
            handleClsCustomerFeedbackUseCaseApi.invoke(
                clsCustomerDataFeedbackPayload = match { payload ->
                    payload.countryCode.value == country &&
                    payload.reconciliationId.print() == ReconciliationId.parse(reconciliationId).print() &&
                    payload.status == status &&
                    (payload.errorMessage ?: "") == (errorMessage ?: "") &&
                    (payload.scope ?: "") == (scope ?: "")
                }
            )
        }
    }
}